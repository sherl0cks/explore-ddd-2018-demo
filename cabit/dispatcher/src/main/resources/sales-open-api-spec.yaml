openapi: 3.0.1
info:
  title: Open Innovation Labs Sales
  contact:
    name: Justin Holmes
    url: https://www.redhat.com/en/services/consulting/open-innovation-labs
    email: jholmes@redhat.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0
  version: 0.1.0
  # influenced by https://www.infoq.com/articles/rest-api-on-cqrs
servers:
- url: https://localhost:8080/api/v1
  description: Local testing server
paths:
  /opportunities:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOpportunityCommand'
        required: true
      responses:
        201:
          description: The events triggered by the request
          content:
            application/json:
              schema:
                type: array
                $ref: '#/components/schemas/CommandProcessingResponse'
        400:
          description: The errors caused by a bad command
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommandProcessingResponse'
        500:
          description: The errors caused by issues on the server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommandProcessingResponse'
  /opportunities/{id}:
    post:
      requestBody:
        content:
          application/json:
            schema:
              # this list will grow over time, as this end point should support multiple requests
              oneOf:
              - $ref: '#/components/schemas/WinOpportunityCommand'
        required: true
      responses:
        200:
          description: The events triggered by the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommandProcessingResponse'
        400:
          description: The errors caused by a bad command
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommandProcessingResponse'
        404:
          description: The requested Opportunity was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommandProcessingResponse'
        500:
          description: The errors caused by issues on the server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommandProcessingResponse'
    parameters:
    - name: id
      in: path
      required: true
      schema:
        type: string
components:
  schemas:

    Opportunity:
      required:
      - name
      - type
      - customerName
      properties:
        name:
          type: string
        type:
          type: string
        customerName:
          type: string

    AggregateIdentity:
      required:
      - type
      - uid
      properties:
        type:
          $ref: '#/components/schemas/AggregateType'
        uid:
          type: string

    AggregateType:
      type: string
      enum:
        - Opportunity

    Command:
      type: object
      required:
      - commandType
      properties:
        commandType:
          $ref: '#/components/schemas/CommandType'

    CommandType:
      type: string
      enum:
        - CreateOpportunityCommand
        - WinOpportunityCommand


    CreateOpportunityCommand:
      allOf:
      - $ref: '#/components/schemas/Command'
      - required:
        - opportunity
        properties:
          opportunity:
            $ref: '#/components/schemas/Opportunity'


    WinOpportunityCommand:
      allOf:
      - $ref: '#/components/schemas/Command'
      - type: object

    Event:
      required:
      - occurredOn
      - eventStreamIndex
      - eventType
      - aggregateIdentity
      properties:
        occurredOn:
          type: string
        eventStreamIndex:
          type: integer
        eventType:
          $ref: '#/components/schemas/EventType'
        aggregateIdentity:
          $ref: '#/components/schemas/AggregateIdentity'
      discriminator:
        propertyName: eventType

    EventType:
      type: string
      enum:
        - OpportunityCreatedEvent
        - OpportunityWonEvent

    OpportunityWonEvent:
      allOf:
      - $ref: '#/components/schemas/Event'
      - type: object
        required:
        - newStatus
        properties:
          newStatus:
            type: string

    OpportunityCreatedEvent:
      allOf:
      - $ref: '#/components/schemas/Event'
      - type: object
        required:
        - newStatus
        - customerName
        - opportunityName
        - opportunityType
        properties:
          newStatus:
            type: string
          customerName:
            type: string
          opportunityType:
            type: string
          opportunityName:
            type: string

    CommandProcessingResponse:
      properties:
        events:
          type: array
          items:
            # unclear how oneOf or anyOf apply translate arrays. anyOf should work, as its less restictive, but that may be the wrong semantic
            # https://swagger.io/docs/specification/data-models/oneof-anyof-allof-not/
            anyOf:
            - $ref: '#/components/schemas/OpportunityCreatedEvent'
            - $ref: '#/components/schemas/OpportunityWonEvent'
            discriminator:
              propertyName: eventType
        errors:
          type: array
          items:
            type: string
